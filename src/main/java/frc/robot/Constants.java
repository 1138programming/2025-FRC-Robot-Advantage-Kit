package frc.robot;

import static edu.wpi.first.units.Units.*;
import static frc.robot.generated.TunerConstants.kSpeedAt12Volts;

import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.math.geometry.Rotation2d;
import edu.wpi.first.wpilibj.RobotBase;

// Generated by the Tuner X Swerve Project Generator
// https://v6.docs.ctr-electronics.com/en/stable/docs/tuner/tuner-swerve/index.html

/*IDs taken
 * Motors: 1, 2, 3, 4, 5, 6, 7, 8, 9
 * Cancoders: 1, 2, 3, 4, 5
 * PWM:
 * DIO: 1, 2, 3
 * Pidgeon: 0
 */

public final class Constants {

  /**
   * This class defines the runtime mode used by AdvantageKit. The mode is always "real" when
   * running on a roboRIO. Change the value of "simMode" to switch between "sim" (physics sim) and
   * "replay" (log replay from a file).
   */
  public static final Mode simMode = Mode.SIM;

  public static final Mode currentMode = RobotBase.isReal() ? Mode.REAL : simMode;

  public static enum Mode {
    /** Running on a real robot. */
    REAL,

    /** Running a physics simulator. */
    SIM,

    /** Replaying from a log file. */
    REPLAY
  }

  public static class DeviceConstants {
    // Motors
    // IDS 1-8 For Swerve
    public static final int KTiltArmId = 9;
    public static final int KLiftMotorID = 10;
    public static final int KCoralIntakeMotorId = 13;
    public static final int KHangMotorId = 12;

    // Cancoder
    // IDS 1-4 For Swerve
    public static final int KLiftCANCoderID = 5;

    // PWM
    public static final int KHangLock = 0;

    // DIO
    public static final int KLiftBottomLImitSwitch = 0;
    public static final int KLiftTopLimitSwitch = 2;
    public static final int KTiltThroughEncoderId = 5;
    public static final int KCoralIntakeMotorLimitSwitch = 3;
    public static final int KArmLimitSwitch = 4;
    public static final int KHangThroughEncoderId = 6;
  }

  public static class SwerveConstants {

    // public static final double KMaxSpeed = kSpeedAt12Volts.in(MetersPerSecond);
    // // kSpeedAt12Volts desired
    public static final double KMaxSpeed =
        kSpeedAt12Volts.in(MetersPerSecond); // kSpeedAt12Volts desired
    // top speed

    public static final double KMaxAngularRate =
        RotationsPerSecond.of(1.8).in(RadiansPerSecond); // 3/4 of
    // a
    // rotation
    // per
    // second
    // max angular velocity

    public static final double KBaseTurboMode = 1;
    public static final double KBaseNormalMode = 0.5;
    public static final double KBaseSlowMode = 0.25;
  }

  public static class FieldConstants {
    // 1 is the 12 oclock right stake from driver pov
    public static final Pose2d KBlueStake1 = new Pose2d(5.34, 3.86, new Rotation2d());
    public static final Pose2d KBlueStake2 = new Pose2d(5.06, 3.35, new Rotation2d());
    public static final Pose2d KBlueStake3 = new Pose2d(4.77, 3.19, new Rotation2d());
    public static final Pose2d KBlueStake4 = new Pose2d(4.20, 3.17, new Rotation2d());
    public static final Pose2d KBlueStake5 = new Pose2d(3.91, 3.34, new Rotation2d());
    public static final Pose2d KBlueStake6 = new Pose2d(3.603, 3.86, new Rotation2d());
    public static final Pose2d KBlueStake7 = new Pose2d(3.603, 4.19, new Rotation2d());
    public static final Pose2d KBlueStake8 = new Pose2d(3.92, 4.69, new Rotation2d());
    public static final Pose2d KBlueStake9 = new Pose2d(4.17, 4.897, new Rotation2d());
    public static final Pose2d KBlueStake10 = new Pose2d(4.79, 4.89, new Rotation2d());
    public static final Pose2d KBlueStake11 = new Pose2d(5.09, 4.73, new Rotation2d());
    public static final Pose2d KBlueStake12 = new Pose2d(5.41, 4.19, new Rotation2d());
    public static final Pose2d[] KBlueStakes =
        new Pose2d[] {
          KBlueStake1,
          KBlueStake2,
          KBlueStake3,
          KBlueStake4,
          KBlueStake5,
          KBlueStake6,
          KBlueStake7,
          KBlueStake8,
          KBlueStake9,
          KBlueStake10,
          KBlueStake10,
          KBlueStake12
        };
    public static final Pose2d KRedStake1 = new Pose2d(12.15, 4.19, new Rotation2d());
    public static final Pose2d KRedStake2 = new Pose2d(12.468, 4.73, new Rotation2d());
    public static final Pose2d KRedStake3 = new Pose2d(12.76, 4.89, new Rotation2d());
    public static final Pose2d KRedStake4 = new Pose2d(13.37, 4.897, new Rotation2d());
    public static final Pose2d KRedStake5 = new Pose2d(13.66, 4.69, new Rotation2d());
    public static final Pose2d KRedStake6 = new Pose2d(13.94, 4.19, new Rotation2d());
    public static final Pose2d KRedStake7 = new Pose2d(13.93, 3.86, new Rotation2d());
    public static final Pose2d KRedStake8 = new Pose2d(13.66, 3.34, new Rotation2d());
    public static final Pose2d KRedStake9 = new Pose2d(13.37, 3.17, new Rotation2d());
    public static final Pose2d KRedStake10 = new Pose2d(12.74, 3.19, new Rotation2d());
    public static final Pose2d KRedStake11 = new Pose2d(12.46, 3.35, new Rotation2d());
    public static final Pose2d KRedStake12 = new Pose2d(12.21, 3.86, new Rotation2d());
    public static final Pose2d[] KRedStakes =
        new Pose2d[] {
          KRedStake1,
          KRedStake2,
          KRedStake3,
          KRedStake4,
          KRedStake5,
          KRedStake6,
          KRedStake7,
          KRedStake8,
          KRedStake9,
          KRedStake10,
          KRedStake10,
          KRedStake12
        };
  }

  public static class OperatorConstants {
    // Controller Ports (check in Driver Station, IDs may be different for each
    // compStreamDeckuter)
    public static final int KLogitechPort = 0;
    public static final int KXboxPort = 1;
    public static final int KCompStreamDeckPort = 2;
    public static final int KTestingStreamDeckPort = 3;
    public static final int KAutonTestingStreamDeckPort = 4;

    // Deadzone
    public static final double KDeadZone = 0.05;

    // Joystick Axis IDs
    public static final int KLeftXAxis = 0;
    public static final int KLeftYAxis = 1;
    public static final int KRightXAxis = 2;
    public static final int KRightYAxis = 3;

    // Joystick Axis IDs
    public static final int KXboxLeftYAxis = 1;
    public static final int KXboxRightYAxis = 5;
    public static final int KXboxLeftXAxis = 0;
    public static final int KXboxRightXAxis = 4;

    // Logitech Button Constants
    public static final int KLogitechButtonX = 1;
    public static final int KLogitechButtonA = 2;
    public static final int KLogitechButtonB = 3;
    public static final int KLogitechButtonY = 4;
    public static final int KLogitechLeftBumper = 5;
    public static final int KLogitechRightBumper = 6;
    public static final int KLogitechLeftTrigger = 7;
    public static final int KLogitechRightTrigger = 8;
    public static final int KLogitechBtnBack = 9;
    public static final int KLogitechRightStart = 10;

    // Xbox Button Constants
    public static final int KXboxButtonA = 1;
    public static final int KXboxButtonB = 2;
    public static final int KXboxButtonX = 3;
    public static final int KXboxButtonY = 4;
    public static final int KXboxLeftBumper = 5;
    public static final int KXboxRightBumper = 6;
    public static final int KXboxSelectButton = 7;
    public static final int KXboxStartButton = 8;
    public static final int KXboxLeftTrigger = 2;
    public static final int KXboxRightTrigger = 3;
  }

  public static class LimelightConstants {
    public static final double KlimelightMountAngleDegrees = 0; // Neeeds to be changed
    public static final double KlimelightMountHeight = 0;
    public static final double KShooterTiltMountHeight = 0;
    public static final double KlimeLightRotP = 0;
    public static final double KlimeLightRotI = 0;
    public static final double KlimeLightRotD = 0;
    public static final double KlimeLightDriveP = 0;
    public static final double KlimeLightDriveI = 0;
    public static final double KlimeLightDriveD = 0;
    public static final double KLimelightAngleDeadzone = 1;
    public static final double KaprilTagOffset = 0;
    public static final PIDController KlimelightrotControl =
        new PIDController(KlimeLightRotP, KlimeLightRotI, KlimeLightRotD);
    public static final PIDController KBaseController =
        new PIDController(KlimeLightDriveP, KlimeLightDriveI, KlimeLightDriveD);
  }

  public static class ArmConstants {
    public static final int KTiltThroughEncoderFullRotationValue = 360; // Troughbore
    public static final double KTiltThroughEncoderZeroPosition =
        -36; // Throughbore -> check complete
    // offset
    // in
    // future

    public static final double KArmStopVelocity = 0;
    public static final double KArmMoveVelocity = 0.4;
    public static final double KArmFlipVelocity = 0.5;

    public static final int KArmControlP = 0;
    public static final int KArmControlI = 0;
    public static final int KArmControlD = 0;
    public static final int KMaxVoltage = 12; // in rps
    public static final int KMaxAcceleration = 60; // in rps/s

    public static final int KArmDeadZone = 1; // in degrees

    public static class ArmPositionConstants {
      public static final int KArmPositionStow = 230; // assuming store means not used

      public static final int KArmPositionReefL4 = 210;
      public static final int KArmPositionReefL3 = 240;
      public static final int KArmPositionReefL2 = 240;
      public static final int KArmPositionReefL1 = 200; // could be between range 0-10

      public static final int KArmPositionIntakeCoralStation = 25; // sloped tunnel is 55Â°
      public static final int KArmPositionIntakeGround = 0; // Unknown
    }
  }

  public static class HangConstants {
    public static final int KHangThroughEncoderFullRotationValue = 360; // Troughbore
    public static final double KHangThroughEncoderZeroPosition =
        -36; // Throughbore -> check complete
  }

  public static class LiftConstants {

    public static final double KLiftStopVelocity = 0;
    public static final double KLiftMoveVelocity = 0.35;

    public static final int KMaxVoltage = 12; // in rps
    public static final int KMaxAcceleration = 60; // in rps/s

    public static class LiftPositionConstants {
      // Takes about 6 rotations to fully extend
      public static final double KLiftPositionStow = -0.1 + 0.30; // assuming store means not used
      // public static final double KLiftPositionStow = 0.3; // assuming store means
      // not used

      // stow point is 0.26
      public static final int KLiftControlP = 0;
      public static final int KLiftControlI = 0;
      public static final int KLiftControlD = 0;

      public static final int KLiftMaxVoltage = 12; // in rps
      public static final double KLiftPositionReefL4 = 5.83 + 0.4;
      public static final double KLiftPositionReefL3 = 3.8 + 0.3;
      public static final double KLiftPositionReefL2 = 1.5 + 0.3;
      public static final double KLiftPositionReefL1 = 1; // could be between range 0-10

      // public static final int KLiftPositionIntakeGround = 340;
      // public static final int KLiftPositionIntakeCoralStation = 55; // sloped
      // tunnel is 55Â°
    }
  }

  public static class CoralIntakeConstants {
    public static final double KCoralIntakeSpeed = 1;
  }
}
